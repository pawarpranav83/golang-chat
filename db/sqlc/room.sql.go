// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: room.sql

package db

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    roomname
) VALUES (
    $1
) RETURNING id, roomname, created_at
`

func (q *Queries) CreateRoom(ctx context.Context, roomname string) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom, roomname)
	var i Room
	err := row.Scan(&i.ID, &i.Roomname, &i.CreatedAt)
	return i, err
}

const deleteRoombyRoomname = `-- name: DeleteRoombyRoomname :exec
DELETE FROM rooms WHERE roomname = $1
`

func (q *Queries) DeleteRoombyRoomname(ctx context.Context, roomname string) error {
	_, err := q.db.ExecContext(ctx, deleteRoombyRoomname, roomname)
	return err
}

const deleteroom = `-- name: Deleteroom :exec
DELETE FROM rooms WHERE id = $1
`

func (q *Queries) Deleteroom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteroom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, roomname, created_at FROM rooms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Roomname, &i.CreatedAt)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT id, roomname, created_at FROM rooms
ORDER BY id
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Roomname, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
