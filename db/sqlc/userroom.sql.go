// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: userroom.sql

package db

import (
	"context"
)

const addUsertoRoom = `-- name: AddUsertoRoom :one
INSERT INTO userroom (
    room_id,
    user_id
) VALUES (
    $1, $2
) RETURNING room_id, user_id
`

type AddUsertoRoomParams struct {
	RoomID int64 `json:"room_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) AddUsertoRoom(ctx context.Context, arg AddUsertoRoomParams) (Userroom, error) {
	row := q.db.QueryRowContext(ctx, addUsertoRoom, arg.RoomID, arg.UserID)
	var i Userroom
	err := row.Scan(&i.RoomID, &i.UserID)
	return i, err
}

const deleteUserfromRoom = `-- name: DeleteUserfromRoom :exec
DELETE FROM userroom WHERE room_id = $1 AND user_id = $2
`

type DeleteUserfromRoomParams struct {
	RoomID int64 `json:"room_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteUserfromRoom(ctx context.Context, arg DeleteUserfromRoomParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserfromRoom, arg.RoomID, arg.UserID)
	return err
}

const getRoomuser = `-- name: GetRoomuser :one
SELECT room_id, user_id FROM userroom
WHERE room_id = $1 AND user_id = $2
`

type GetRoomuserParams struct {
	RoomID int64 `json:"room_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetRoomuser(ctx context.Context, arg GetRoomuserParams) (Userroom, error) {
	row := q.db.QueryRowContext(ctx, getRoomuser, arg.RoomID, arg.UserID)
	var i Userroom
	err := row.Scan(&i.RoomID, &i.UserID)
	return i, err
}

const getRoomusers = `-- name: GetRoomusers :many
SELECT room_id, user_id FROM userroom
WHERE room_id = $1
`

func (q *Queries) GetRoomusers(ctx context.Context, roomID int64) ([]Userroom, error) {
	rows, err := q.db.QueryContext(ctx, getRoomusers, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Userroom
	for rows.Next() {
		var i Userroom
		if err := rows.Scan(&i.RoomID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRooms = `-- name: GetUserRooms :many
SELECT room_id, user_id FROM userroom
WHERE user_id = $1
`

func (q *Queries) GetUserRooms(ctx context.Context, userID int64) ([]Userroom, error) {
	rows, err := q.db.QueryContext(ctx, getUserRooms, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Userroom
	for rows.Next() {
		var i Userroom
		if err := rows.Scan(&i.RoomID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
